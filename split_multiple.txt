import unittest
from unittest.mock import mock_open, patch
import pandas as pd

class TestWebSHKExSuspension(unittest.TestCase):
    def setUp(self):
        # 在每个测试用例前设置模拟数据
        self.mock_html_content = """
        <!DOCTYPE html>
        <html>
        <head><title>Trading Halt</title></head>
        <body>
            <table>
                <tr>
                    <td class="text-right text-end release-time">2025/07/01 09:00</td>
                    <td class="text-right text-end stock-short-code">00001</td>
                    <td class="stock-short-name">长和</td>
                    <td>
                        <div class="headline">公告</div>
                        <div class="doc-link"><a href="document.pdf">文件</a></div>
                    </td>
                </tr>
                <tr>
                    <td class="text-right text-end release-time">2025/07/01 09:30</td>
                    <td class="text-right text-end stock-short-code">00002</td>
                    <td class="stock-short-name">中电控股</td>
                    <td>
                        <div class="headline">待刊发公告</div>
                        <div class="doc-link"><a href="doc2.pdf">文件</a></div>
                    </td>
                </tr>
            </table>
        </body>
        </html>
        """
        
        # 设置配置对象
        class MockConfig:
            def __init__(self):
                self.html_filenames = ['TradingHalt_20250701.html']
                self.html_paths = ['mock_data/TradingHalt_20250701.html']
                self.csv_paths = ['output/HKEXsuspension_20250701.csv']
                self.file_date = '20250701'
                self.file_dir_date = '20250701'
                self.susp_status_list = ['Trading Halt']
        
        self.config = MockConfig()
        self.from_date = '20250701'
        self.to_date = '20250701'

    def test_parse_file_normal(self):
        """测试正常情况下的文件解析"""
        with patch('builtins.open', mock_open(read_data=self.mock_html_content)):
            # 调用被测试的函数，传入所需参数
            result = parse_file(self.config, self.from_date, self.to_date)
            
            # 验证结果
            self.assertIsNotNone(result)
            self.assertEqual(len(result['release_time']), 2)
            self.assertEqual(result['release_time'], ['2025/07/01 09:00', '2025/07/01 09:30'])
            self.assertEqual(result['stock_code'], ['00001', '00002'])
            self.assertEqual(result['short_stock_name'], ['长和', '中电控股'])
            self.assertEqual(result['document'], ['公告', '待刊发公告'])
            self.assertEqual(result['doc_url'], ['document.pdf', 'doc2.pdf'])
            self.assertEqual(result['susp_status'], ['Trading Halt', 'Trading Halt'])

    def test_parse_file_different_dates(self):
        """测试不同日期范围的情况"""
        with patch('builtins.open', mock_open(read_data=self.mock_html_content)):
            # 测试不同的日期范围
            result = parse_file(self.config, '20250701', '20250702')
            self.assertIsNotNone(result)
            # 验证日期相关的处理逻辑...

    def test_parse_file_empty_data(self):
        """测试空数据的情况"""
        empty_html = """
        <!DOCTYPE html>
        <html><body><table></table></body></html>
        """
        with patch('builtins.open', mock_open(read_data=empty_html)):
            result = parse_file(self.config, self.from_date, self.to_date)
            
            # 验证空数据的处理
            self.assertEqual(result['release_time'], [])
            self.assertEqual(result['stock_code'], [])
            self.assertEqual(result['short_stock_name'], [])
            self.assertEqual(result['document'], [])
            self.assertEqual(result['doc_url'], [])

    def test_parse_file_invalid_dates(self):
        """测试无效日期的情况"""
        with patch('builtins.open', mock_open(read_data=self.mock_html_content)):
            # 测试结束日期早于开始日期的情况
            with self.assertRaises(ValueError):
                parse_file(self.config, '20250702', '20250701')

if __name__ == '__main__':
    unittest.main()
