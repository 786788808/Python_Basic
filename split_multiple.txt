import pytest
from unittest.mock import Mock, patch
import pandas as pd
from webs_us_sanction import SanctionConfig, web_crawler, parse_file


# 1. 配置文件测试
def test_sanction_config():
    config = SanctionConfig('dev', '20250704')
    assert config.file_path.endswith('webs_us_sanction.xml')
    assert isinstance(config.proxies, dict)


# 2. 爬虫功能测试
@patch('requests.get')
def test_web_crawler(mock_get):
    # Mock请求响应
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.content = open('tests/test_dags/app/mock/webs_us_sanction.xml', 'rb').read()
    mock_get.return_value = mock_response

    config = SanctionConfig('dev', '20250704')
    web_crawler(config)
    assert os.path.exists(config.file_path)


# 3. 解析功能测试
def test_parse_file():
    config = SanctionConfig('dev', '20250704')
    config.file_path = 'tests/test_dags/app/mock/webs_us_sanction.xml'

    parse_file(config)

    # 验证CSV文件生成和内容
    df = pd.read_csv(config.csv_path)
    assert 'EntityName' in df.columns
    assert 'SanctionProgram' in df.columns
    assert len(df) > 0
