from unittest.mock import patch, mock_open, Mock
import json
import os

# 假设 MOCK_ENV_CONFIG 已经在你的文件顶部定义好

@patch('builtins.open')
@patch('requests.get')
@patch('os.path.exists')
@patch('os.makedirs')
def test_web_crawler(mock_makedirs, mock_exists, mock_get, mock_open_builtin):
    # 1. mock os.path.exists 返回 True
    mock_exists.return_value = True

    # 2. mock requests.get
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.content = b"<xml>test</xml>"
    mock_get.return_value = mock_response

    # 3. mock open 针对 env.json 和 xml 文件
    def open_side_effect(file, mode='r', *args, **kwargs):
        # 针对 env.json 返回 JSON 字符串
        print("open file:", file)  # 这里可以看到每次 open 的文件名
        if 'env.json' in str(file):
            m = mock_open(read_data=json.dumps(MOCK_ENV_CONFIG))
            return m()
        # 针对 xml 文件，模拟写入
        elif str(file).endswith('.xml'):
            m = mock_open()
            return m()
        # 其他文件，返回空内容
        else:
            m = mock_open(read_data='')
            return m()
    mock_open_builtin.side_effect = open_side_effect

    # 4. 执行测试
    from Webs_US_Sanction import SanctionConfig, web_crawler
    config = SanctionConfig('dev', '20250704')
    result = web_crawler(config.file_path)
    assert result is True
