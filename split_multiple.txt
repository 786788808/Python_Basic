@patch('builtins.open')
@patch('requests.get')
@patch('os.path.exists')
@patch('os.makedirs')
def test_web_crawler(mock_makedirs, mock_exists, mock_get, mock_open):
    # Mock os.path.exists 返回 True
    mock_exists.return_value = True
    
    # 准备 mock 数据
    env_json = json.dumps(MOCK_ENV_CONFIG)
    xml_content = b"<xml>test</xml>"
    
    # Mock 请求响应
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.content = xml_content
    mock_get.return_value = mock_response
    
    # 使用 mock_open 来处理文件操作
    from unittest.mock import mock_open as mocked_open
    m = mocked_open(read_data=env_json)
    
    def side_effect(*args, **kwargs):
        if 'env.json' in str(args[0]):
            return mocked_open(read_data=env_json)()
        return mocked_open(read_data='')()
    
    mock_open.side_effect = side_effect

    config = SanctionConfig('dev', '20250704')
    result = web_crawler(config)
    assert result is True
