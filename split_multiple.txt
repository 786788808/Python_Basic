@patch('builtins.open')
@patch('requests.get')
@patch('os.path.exists')
@patch('os.makedirs')
def test_web_crawler(mock_makedirs, mock_exists, mock_get, mock_open):
    # Mock os.path.exists 返回 True
    mock_exists.return_value = True
    
    # 准备 mock 数据
    mock_env_data = json.dumps(MOCK_ENV_CONFIG)  # 不要转换成 bytes
    xml_content = b"<xml>test</xml>"
    
    # Mock 请求响应
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.content = xml_content
    mock_get.return_value = mock_response
    
    # 创建一个简单的文件模拟类
    class MockFile:
        def __init__(self, content):
            self.content = content
        def read(self):
            return self.content
        def write(self, content):
            pass
        def __enter__(self):
            return self
        def __exit__(self, *args):
            pass
    
    # 设置不同文件的返回内容
    def mock_open_func(*args, **kwargs):
        if 'env.json' in str(args[0]):
            return MockFile(mock_env_data)  # 返回字符串格式的 JSON
        return MockFile('')  # 其他文件返回空字符串
    
    mock_open.side_effect = mock_open_func

    config = SanctionConfig('dev', '20250704')
    result = web_crawler(config)
    assert result is True
