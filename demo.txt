import unittest
from unittest.mock import patch, MagicMock
import sys
import subprocess
from datetime import datetime, timedelta

# 导入需要测试的模块
sys.path.append('..')
from sftp import CtlFileNotFoundException, check_ctl_exist

class TestSftp(unittest.TestCase):

    def test_ctl_file_not_found_exception(self):
        """测试自定义异常能否被正确抛出并包含消息"""
        test_message = "Test error message"
        with self.assertRaises(CtlFileNotFoundException) as context:
            raise CtlFileNotFoundException(test_message)

        self.assertEqual(str(context.exception), test_message)

    @patch('sftp.sftp_con')
    @patch('sftp.file_date')
    @patch('subprocess.Popen')
    def test_check_ctl_exist_success(self, mock_popen, mock_file_date, mock_sftp_con):
        """测试CTL文件成功找到的情况"""
        # 设置模拟的全局变量
        mock_file_date.return_value = '20230915'
        mock_sftp_con.return_value = '| sftp -oSomeOptions user@host'
        
        # 配置Mock Popen实例
        mock_process = MagicMock()
        mock_popen.return_value = mock_process
        # 模拟 communicate() 返回 (stdout, stderr)
        mock_process.communicate.return_value = (
            b'-rw-r--r-- 1 user group 123 Sep 14 08:00 ready_20230914.ctl',
            b''
        )
        mock_process.returncode = 0

        # 执行函数
        result = check_ctl_exist()

        # 断言
        self.assertTrue(result)  # 应返回 True
        # 断言 Popen 被调用了一次，并且参数正确
        mock_popen.assert_called_once()
        call_args, call_kwargs = mock_popen.call_args
        self.assertIn('echo \'ls -l /srv/ftp/inf_to_hsil/ready_20230914.ctl\'', call_args[0])
        self.assertEqual(call_kwargs['shell'], True)
        self.assertEqual(call_kwargs['stdout'], subprocess.PIPE)
        self.assertEqual(call_kwargs['stderr'], subprocess.PIPE)

    @patch('sftp.sftp_con')
    @patch('sftp.file_date')
    @patch('subprocess.Popen')
    def test_check_ctl_exist_not_found_via_stderr(self, mock_popen, mock_file_date, mock_sftp_con):
        """测试CTL文件未找到的情况（通过stderr信息判断）"""
        # 设置模拟的全局变量
        mock_file_date.return_value = '20230915'
        mock_sftp_con.return_value = '| sftp -oSomeOptions user@host'
        
        # 配置Mock Popen实例
        mock_process = MagicMock()
        mock_popen.return_value = mock_process
        # 模拟 communicate() 返回 (stdout, stderr)
        mock_process.communicate.return_value = (
            b'',  # stdout 为空
            b"Can't ls: No such file or directory"  # stderr 包含特定错误
        )
        mock_process.returncode = 1

        # 断言函数抛出了我们自定义的异常
        with self.assertRaises(CtlFileNotFoundException):
            check_ctl_exist()

        mock_popen.assert_called_once()

    @patch('sftp.sftp_con')
    @patch('sftp.file_date')
    @patch('subprocess.Popen')
    def test_check_ctl_exist_subprocess_error(self, mock_popen, mock_file_date, mock_sftp_con):
        """测试subprocess.Popen调用本身出现异常（非文件未找到）"""
        # 设置模拟的全局变量
        mock_file_date.return_value = '20230915'
        mock_sftp_con.return_value = '| sftp -oSomeOptions user@host'
        
        # 配置Mock Popen直接抛出异常，例如OSError
        mock_popen.side_effect = OSError("Failed to execute command")

        # 断言原始异常被传播
        with self.assertRaises(OSError):
            check_ctl_exist()

        mock_popen.assert_called_once()

    @patch('sftp.sftp_con')
    @patch('sftp.file_date')
    @patch('subprocess.Popen')
    def test_check_ctl_exist_with_different_date_formats(self, mock_popen, mock_file_date, mock_sftp_con):
        """测试不同日期格式的处理"""
        # 设置模拟的全局变量
        mock_file_date.return_value = '20231201'
        mock_sftp_con.return_value = '| sftp -oSomeOptions user@host'
        
        # 配置Mock Popen实例
        mock_process = MagicMock()
        mock_popen.return_value = mock_process
        mock_process.communicate.return_value = (
            b'-rw-r--r-- 1 user group 123 Nov 30 08:00 ready_20231130.ctl',
            b''
        )
        mock_process.returncode = 0

        # 执行函数
        result = check_ctl_exist()

        # 断言
        self.assertTrue(result)
        mock_popen.assert_called_once()
        call_args, call_kwargs = mock_popen.call_args
        # 检查命令中是否包含正确的前一天日期
        self.assertIn('ready_20231130.ctl', call_args[0])

if __name__ == '__main__':
    unittest.main()
